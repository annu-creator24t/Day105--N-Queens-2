class Solution {
    public int totalNQueens(int n) {
        return solve(0, n, new boolean[n], new boolean[2 * n], new boolean[2 * n]);
    }

    private int solve(int row, int n, boolean[] cols, boolean[] d1, boolean[] d2) {
        if (row == n) return 1;
        
        int count = 0;
        for (int col = 0; col < n; col++) {
            int id1 = col - row + n; // main diagonal
            int id2 = row + col;     // anti-diagonal
            if (cols[col] || d1[id1] || d2[id2]) continue;

            // Place queen
            cols[col] = d1[id1] = d2[id2] = true;
            count += solve(row + 1, n, cols, d1, d2);
            // Remove queen (backtrack)
            cols[col] = d1[id1] = d2[id2] = false;
        }

        return count;
    }
}
